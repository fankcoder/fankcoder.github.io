<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fank</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 18 Mar 2019 17:02:28 +0800</pubDate>
    <lastBuildDate>Mon, 18 Mar 2019 17:02:28 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>vscode配置手册</title>
        <description>&lt;h2 id=&quot;vs-code&quot;&gt;VS Code&lt;/h2&gt;

&lt;h3 id=&quot;plugin&quot;&gt;Plugin&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim
atom dark theme
al code outline
python
django
sql server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vim-插件不能响应长按的解决&quot;&gt;vim 插件不能响应长按的解决&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false # For VS Code

defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool false # For VS Code Insider
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用tab键切换提示&quot;&gt;使用tab键切换提示&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[{

&quot;key&quot;: &quot;tab&quot;,

&quot;command&quot;: &quot;-acceptSelectedSuggestion&quot;,

&quot;when&quot;: &quot;suggestWidgetVisible &amp;amp;&amp;amp; textInputFocus&quot;

},

{

&quot;key&quot;: &quot;tab&quot;,

&quot;command&quot;: &quot;selectNextSuggestion&quot;,

&quot;when&quot;: &quot;suggestWidgetMultipleSuggestions &amp;amp;&amp;amp; suggestWidgetVisible &amp;amp;&amp;amp; textInputFocus&quot;

}

]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%B7%A5%E5%85%B7/2019/03/08/vscode.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%B7%A5%E5%85%B7/2019/03/08/vscode.html</guid>
        
        <category>vscode</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>mac使用手册</title>
        <description>&lt;h2 id=&quot;iterm2&quot;&gt;iterm2&lt;/h2&gt;

&lt;h3 id=&quot;分屏&quot;&gt;分屏&lt;/h3&gt;

&lt;p&gt;快捷键“cmd+d”左右分屏，快捷键“^+cmd+d”上下分屏&lt;/p&gt;

&lt;p&gt;cmd+[ / ] 左右切换分屏 cmd+opt(alt)+上下左右切换分屏&lt;/p&gt;

&lt;h3 id=&quot;粘贴板&quot;&gt;粘贴板&lt;/h3&gt;

&lt;p&gt;调出复制过的文本历史 快捷键：“^+cmd+h”&lt;/p&gt;

&lt;h3 id=&quot;回放&quot;&gt;回放&lt;/h3&gt;

&lt;p&gt;按键回放 cmd+alt+b&lt;/p&gt;

&lt;h2 id=&quot;homebrew&quot;&gt;homebrew&lt;/h2&gt;

&lt;h2 id=&quot;git&quot;&gt;Git&lt;/h2&gt;

&lt;h2 id=&quot;oh-my-zsh&quot;&gt;oh my zsh&lt;/h2&gt;

&lt;h3 id=&quot;spaceship-theme&quot;&gt;spaceship theme&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/denysdovhan/spaceship-prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;meslo-font&quot;&gt;meslo font&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fzf&quot;&gt;fzf&lt;/h3&gt;

&lt;p&gt;模糊搜索&lt;/p&gt;

&lt;h3 id=&quot;zsh-syntax-highlighting&quot;&gt;zsh-syntax-highlighting&lt;/h3&gt;
&lt;p&gt;语法高亮&lt;/p&gt;

&lt;h3 id=&quot;autojump&quot;&gt;autojump&lt;/h3&gt;

&lt;p&gt;快速跳转目录&lt;/p&gt;

&lt;h3 id=&quot;zsh个性化配置&quot;&gt;zsh个性化配置&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZSH_THEME=&quot;spaceship&quot;
plugins=(robbyrussell git zsh-syntax-highlighting autojump)
 [[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;amp;&amp;amp; . $(brew --prefix)/etc/profile.d/autojump.sh
export GEM_HOME=$HOME/gems
export PATH=$HOME/gems/bin:$PATH
alias py3=&quot;source /Users/fank/code/py3.7/bin/activate&quot;
export PROMPT_COMMAND='echo -ne &quot;\033]0;$PWD\007&quot;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;快捷键启动iterm2方案&quot;&gt;快捷键启动iterm2方案&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 编写mac启动脚本
2. alt+space 搜索iterm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dash&quot;&gt;dash&lt;/h3&gt;
&lt;p&gt;文档查询工具&lt;/p&gt;

&lt;h3 id=&quot;sequel-pro&quot;&gt;Sequel pro&lt;/h3&gt;

&lt;h3 id=&quot;charles&quot;&gt;Charles&lt;/h3&gt;

&lt;h3 id=&quot;nomechine&quot;&gt;NoMechine&lt;/h3&gt;

&lt;p&gt;远程工具&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%B7%A5%E5%85%B7/2019/03/08/mac-tools.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%B7%A5%E5%85%B7/2019/03/08/mac-tools.html</guid>
        
        <category>mac,</category>
        
        <category>osx</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>Python深入学习笔记</title>
        <description>&lt;h3 id=&quot;typeobject和class的关系&quot;&gt;type,object和class的关系&lt;/h3&gt;

&lt;p&gt;type(int) -&amp;gt; class type -&amp;gt; obj&lt;/p&gt;

&lt;p&gt;type -&amp;gt; int -&amp;gt; 1&lt;/p&gt;

&lt;p&gt;type生成类对象，类对象生成实例对象&lt;/p&gt;

&lt;p&gt;int.&lt;strong&gt;bases&lt;/strong&gt; class ‘object’&lt;/p&gt;

&lt;p&gt;基类均为class object, object是最顶层基类。&lt;/p&gt;

&lt;p&gt;type.&lt;strong&gt;bases&lt;/strong&gt; class ‘object’ type继承obj&lt;/p&gt;

&lt;p&gt;type(object) class ’type’ obj是type的实例, 形成环路&lt;/p&gt;

&lt;p&gt;object.&lt;strong&gt;bases&lt;/strong&gt; None&lt;/p&gt;

&lt;h3 id=&quot;内置类型&quot;&gt;内置类型&lt;/h3&gt;

&lt;p&gt;对象3个特征:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;身份id(a)&lt;/li&gt;
  &lt;li&gt;2.类型type&lt;/li&gt;
  &lt;li&gt;3.值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;None全局唯一&lt;/p&gt;

&lt;p&gt;数值int, float,complex复数,bool&lt;/p&gt;

&lt;p&gt;迭代类型&lt;/p&gt;

&lt;p&gt;序列类型 list,bytes,range,tuple,str,array&lt;/p&gt;

&lt;p&gt;映射类型 dict&lt;/p&gt;

&lt;p&gt;集合 set , frozenset&lt;/p&gt;

&lt;p&gt;上下文管理器 with&lt;/p&gt;

&lt;p&gt;其他 模块from import,class,object,type&lt;/p&gt;

&lt;h3 id=&quot;魔法函数&quot;&gt;魔法函数&lt;/h3&gt;

&lt;p&gt;以双下划线开头，双下划线结尾。可以定制类的特性&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iter&lt;/strong&gt;,__getitem__实现了都是可迭代的&lt;/p&gt;

&lt;p&gt;def &lt;strong&gt;getitem&lt;/strong&gt;(self, item):&lt;/p&gt;

&lt;p&gt;return self._list[item]&lt;/p&gt;

&lt;p&gt;拆包，给长度数量的变量给他们赋值&lt;/p&gt;

&lt;h3 id=&quot;鸭子类型和多态&quot;&gt;鸭子类型和多态&lt;/h3&gt;
&lt;p&gt;当一只鸟，走路，游泳，叫起来都像鸭子，那么这只鸟就可以被叫做鸭子
都实现了同一种方法，所以可以归为一类，不需要继承，只需要实现同方法，就可以实现多态&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Cat(object):
    def say(self):
        print(‘im a cat’)

class Dog(object):
    def say(self):
        print(‘im a dog’)


animal = Cat
animal().say()

animal_list = [Cat, Dog]
for animal in animal_list:
    animal().say()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;抽象基类abc模块&quot;&gt;抽象基类abc模块&lt;/h3&gt;
&lt;p&gt;检查某个类是否有某种方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Company(object):
    def __init__(self, employee_list):
        self.employee = employee_list

    def __len__(self):
        return len(self.employee)

com = Company([‘bob1’,’bob2’])
print(hasattr(com, ‘__len__’) #检验类是否具有该方法
# print(len(com))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;抽象基类abc模块-1&quot;&gt;抽象基类abc模块&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from collections.abc import Sized
isinstance(com, Sized) # 判断类型
import abc

class CacheBase(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get(self, key):
        pass

    @abc.abstractmethod
    def set(self, key, value):
        pass

class RedisCache(CacheBase):
    pass

redis_cache = REdisCache()  
#会报错。
#abstractmethod要求被继承的类，必须实现父类的方法，否则会报错
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;判断继承用isinstance()不要用type()&lt;/p&gt;

&lt;h4 id=&quot;类变量和实例变量&quot;&gt;类变量和实例变量&lt;/h4&gt;
&lt;p&gt;类中的self是类的实例&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A:
    aa = 1 #类变量
    def __init__(self, x, y):
        self.x = x
        self.y = y  #实例变量
a = A(2,3)
A.aa = 11 #修改类变量
a.aa = 100 #新建变量
print(a.x, a.y, a.aa)
print(A.a)
print(A.x) #error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;self是类的实例，类变量和类实例变量的区别&lt;/p&gt;

&lt;p&gt;__mro__查找。DFS深度优先，对菱形继承有问题，BFS广度优先也有覆盖问题，py3用C3算法&lt;/p&gt;

&lt;p&gt;@staticmethod静态方法，传参和普通函数一样，&lt;strong&gt;不需要写self参数&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Data:
    @staticmethod
    def parse_from_string(date_str):
        year, month, day = tuple(date_str)
        return Date(year, month, day)  #静态方法硬编码，返回值必须与类名相同
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@classmethod类方法，第一参数是类本身cls，返回值不需要与类同名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    @classmethod
    def from_string(cls, date_str):  #cls传递的是类本身，不是实例
        year, month, day = tuple(date_str)
        return cls(year, month, day)  #写为cls,变为动态不必与类名相同
#cls是习惯性写法，在这里甚至可以写为self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;类的私有属性&quot;&gt;类的私有属性&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.__birthday双下划线开头，但并不绝对安全，_User__birthday依然可以访问到
class User:
    def __init__(self):
        self.__birthday = birthday  #无法被访问
    def get_age(self):
        return 2019 - self.__birthday.year
    def __get_other(self):  #私有方法
        pass
user = User(Date(1992,9,28))
user._User__birthday  #py帮助我们使用这种简单方式封装，找到规律就可以访问
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;自省机制&quot;&gt;自省机制&lt;/h3&gt;
&lt;p&gt;自省是通过一定的机构查询到对象的内部结构&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Person:
    name = ‘user’

clss Student(Person):
    def __init__(self, school_name):
        self.school_name = ‘'
user = Student(‘abc’)
print(user.__dict__)  #打印实例属性，{’school_name’:abc}.c优化的魔法函数
print(Person.__dict__) #类属性
user.__dict__[’school_addr’] = ‘efg’  #甚至可以赋值
dir(user)  #更详细，功能更强
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;super&quot;&gt;super&lt;/h3&gt;
&lt;p&gt;获取父类init (其实是mro顺序的类，查看方法classname.&lt;strong&gt;mro&lt;/strong&gt;)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A:
    def __init__(self):
        print(‘a’)

class B(A):
    def __init__(self):
        print(‘b’)
        super(b, self).__init__() # py2
        super().__init__() # py3

b = B()

from threading import Thread
class MyThread(Thread):
    def __init__(self, name, user):
        self.user = user
        super().__init__(name=name)  #重用父类代码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;mixin模式&quot;&gt;mixin模式&lt;/h3&gt;
&lt;p&gt;多继承不推荐，mixin代替多继承
特点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Mixin类功能单一&lt;/li&gt;
  &lt;li&gt;不和基类关联，可以和任意基类组合&lt;/li&gt;
  &lt;li&gt;在mixin中不要使用supper&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;with上下文管理器&quot;&gt;with上下文管理器&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try:
    raise KeyError
except KeyError as e:
    print('e')
else:
    print('else') #当try正确运行时&amp;amp;except没有捕获到异常打印
finally:
    print('f') #始终运行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;with语句是为了简化try..finally诞生的&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Sample:
    def __enter__(self):
        #获取资源
        print('enter')
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        #释放资源
        print('exit')
    def do_something(self):
        print('do smt')

with Sample() as sample:
    sample.do_something() 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个类实现了上下文管理器协议，此协议非常好用。
with是对上下文管理器的支持。&lt;/p&gt;

&lt;h3 id=&quot;contextlib简化上下文管理器&quot;&gt;contextlib简化上下文管理器&lt;/h3&gt;
&lt;p&gt;进一步简化&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import contextlib

@contextlib.contextmanager
def file_open(file_name):
    print('file open')  # __enter__的位置
    yield {}
    print('file end')  # __exit__的位置
    
with file_open('text') as f:
    pass

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;collections&quot;&gt;collections&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from collections import *

from collections.abc import * #抽象基类
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;tuple不可修改并不绝对。tuple值为list可以修改(id没变，不建议这样使用)&lt;/p&gt;

&lt;p&gt;tuple比list好处，c语音类比，tuple对应struct,list对应array.性能优化，线程安全，可以作为dict的key,拆包特性。&lt;/p&gt;

&lt;p&gt;namedtuple可以生成类，User = namedtuple(“User”,[‘name’,’age’])&lt;/p&gt;

&lt;p&gt;节省空间，用于数据处理，从数据库取数据为tuple，直接赋值&lt;/p&gt;

&lt;h3 id=&quot;def-askargs-kwargspass&quot;&gt;def ask(*args, **kwargs):pass&lt;/h3&gt;

&lt;p&gt;ask(‘f’,25) 传给*args, ask(name=’f’, age=25)传给**kwargs&lt;/p&gt;

&lt;p&gt;*args是个tuple, **kwargs是个dict&lt;/p&gt;

&lt;p&gt;_make方法初始化，_asdict()&lt;/p&gt;

&lt;p&gt;from collections import defaultdict C语言实现，性能高,比setdefault更强大&lt;/p&gt;

&lt;p&gt;default_dict = defaultdict(int) 参数是可调用对象&lt;/p&gt;

&lt;p&gt;default_dict[‘key’] #key=0&lt;/p&gt;

&lt;h3 id=&quot;deque双端队列&quot;&gt;deque双端队列&lt;/h3&gt;

&lt;p&gt;应用场景queue是由deque来完成的。deque是线程安全到，list不是线程安全的，由GIL保护。&lt;/p&gt;

&lt;p&gt;from collections import deque&lt;/p&gt;

&lt;p&gt;copy是浅拷贝，如果值为list会相互影响&lt;/p&gt;

&lt;p&gt;counter(iterm) 快速统计,counter.update().most_common(n)出现最多到前n个,使用堆实现(完全二叉树)&lt;/p&gt;

&lt;h3 id=&quot;orderdict是有序的&quot;&gt;OrderDict是有序的&lt;/h3&gt;

&lt;p&gt;py3的dict默认是有序的。&lt;/p&gt;

&lt;p&gt;_d = OrderedDict() _d.popitem()不需要传key _d.move_to_end()&lt;/p&gt;

&lt;h3 id=&quot;chainmap&quot;&gt;ChainMap&lt;/h3&gt;

&lt;p&gt;方便操作多个dict. 将dict连结,key相同只有一个。&lt;/p&gt;

&lt;p&gt;from collections import ChainMap&lt;/p&gt;

&lt;p&gt;new_dict = ChainMap(_d1, _d2)&lt;/p&gt;

&lt;p&gt;new_dict.maps全部打印，同样可以修改&lt;/p&gt;

&lt;h3 id=&quot;类和对象&quot;&gt;类和对象&lt;/h3&gt;

&lt;p&gt;type() object&lt;/p&gt;

&lt;p&gt;魔法函数&lt;/p&gt;

&lt;p&gt;hasattr(param,”&lt;strong&gt;len&lt;/strong&gt;”) 判断是否有这个函数，用isinstance()更好&lt;/p&gt;

&lt;p&gt;希望用户继承时必须实现方法&lt;/p&gt;

&lt;p&gt;class CacheBase():&lt;/p&gt;

&lt;p&gt;def get(self, key):raise NotImplementedError&lt;/p&gt;

&lt;p&gt;def set(self, key, value):pass&lt;/p&gt;

&lt;h3 id=&quot;is-和-&quot;&gt;is 和 ==&lt;/h3&gt;

&lt;p&gt;is判断id是否相同&lt;/p&gt;

&lt;p&gt;==判断值&lt;/p&gt;

&lt;p&gt;isinstance 和type，判断类的类型尽量用isinstance&lt;/p&gt;

&lt;h3 id=&quot;自定义序列类&quot;&gt;自定义序列类&lt;/h3&gt;

&lt;p&gt;容器序列，扁平序列，可变序列sequence，不可变序列mutable&lt;/p&gt;

&lt;p&gt;python面向协议编程 in可以作用于list&lt;/p&gt;

&lt;h3 id=&quot;extend&quot;&gt;+,+=,extend&lt;/h3&gt;
&lt;p&gt;+=（&lt;strong&gt;iadd&lt;/strong&gt;）的参数可以是序列，+必须两边同类型
a.extend(range(0,3)) #直接对值修改，不需要再赋值，参考apped
a.append([1,2])  #[1,2,[1,2]]注意和extend的区别&lt;/p&gt;

&lt;p&gt;参数可以为任意序列，通过for循环append&lt;/p&gt;

&lt;p&gt;切片[start : end : step]，默认值可省略[0,len(L),1].&lt;/p&gt;

&lt;p&gt;实现支持切片操作的类&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Group:
    def __init__(self, group_name, company_name, staffs):
        self.group_name = group_name
        self.company_name = company_name
        self.staffs = staffs
    
    def __reversed__(self):
        self.staffs.reversed()  #这种方式实现不了
        for each in self.staffs[::-1]:
            yield each
        
    # def __getitem__(self, item):
    #     return self.staff[item] #返回对象为list或单个元素
    import numbers
    def __getitem__(self, item):  #返回类对象
        cls = type(self)
        if isinstance(item, slice):
            return cls(group_name=self.group_name, company_name=self.company_name, staffs=self.staffs[item])
        elif isinstance(item, numbers.Interal):
            return cls(group_name=self.group_name, company_name=self.company_name, [staffs=self.staffs[item]])
    
    def __len__(self):
        return len(self.staffs)
        
    def __iter__(self):
        return iter(self.staffs)
    
    def __contains__(self, item):
        if item in self.staffs:
            return True
        else:
            return False
        
staffs = ['a', 'b', 'c']
group = Group(group_name='gname', company_name='cname', staff=staffs)
group[:2]
for user in group:
    print(user)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bisect&quot;&gt;bisect&lt;/h3&gt;
&lt;p&gt;bisect处理已排序序列，二分查找。插入排序好的数列，升序bisect.insort(list, 5).
二分法查找位置，插入位置bisect.bisect(list, 3)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import bisect

l = []
bisect.insort(4)
bisect.insort(1)
bisect.insort(3)
bisect.insort(2)
print(l) #[1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;arrary和list重要区别，array只能存放指定的数据类型。布隆过滤器。
arrary是c中的数组，一串连续的内存块，性能高。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import array
_a = array.array('i') # int,参数查看文档
_a.append()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;列表推导式生成式生成器表达式&quot;&gt;列表推导式（生成式）&amp;amp;生成器表达式&lt;/h3&gt;
&lt;p&gt;通过一行代码生成列表。&lt;/p&gt;

&lt;p&gt;列表生成式性能能高于列表操作&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;odd_list = [i for i in range(21) if i%2 == 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;复杂情况的列表生成式，可以使用函数实现.（过于复杂就放弃吧，代码可读性更重要）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sqrt(item):
    return item*item
odd_list = [sqrt(i) for i in range(21) if i%2 == 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成器表达式为小括号，type变为generator&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;odd_list = (i for i in range(21) if i%2 == 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;字典推导式&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my_dict ={'a':1, 'b':2}
_reversed = {value:key for key, value in my_dict.items()} # 交换value,key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;集合推导式&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my_set = {key for key,value in my_dict.items()}
type(my_set)  # set
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;深入set和dict&quot;&gt;深入set和dict&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a.copy() #浅拷贝

import copy 

copy.deepcopy(a) #深拷贝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;浅拷贝就是创建一个具有相同类型，相同值但不同id的新对象。
深拷贝不仅仅拷贝了原始对象自身，也对其包含的值进行拷贝，它会递归的查找对象中包含的其他对象的引用，来完成更深层次拷贝。因此，深拷贝产生的副本可以随意修改而不需要担心会引起原始值的改变。&lt;/p&gt;

&lt;h4 id=&quot;dict的formkeys方法&quot;&gt;dict的formkeys方法&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;l = ['a', 'b']
d = dict.fromkeys(l, {'c','d'})
print(d) #{'a': {'c', 'd'}, 'b': {'c', 'd'}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;get方法&quot;&gt;get方法&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_d['key']  #key不存在会抛异常
_dict.get(&quot;a&quot;, {}) #get方法非常实用！{}为默认值
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;items&quot;&gt;items&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for key, value in _d.items()：
    print(k,v)   #烂大街的好方法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;setdefault-增加get方法&quot;&gt;setdefault 增加get方法&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setdefault(key, default)
# 1.先调用get()
# 2.没有则默认值
# 3.再把默认值设置进dict
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;update&quot;&gt;update&lt;/h4&gt;
&lt;p&gt;合并字典&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_dict.update({'c':1})
_dict.update(&quot;a&quot;=1,&quot;b&quot;=2) #放iterm都可以
_dict.update(（（’e‘,'f'），）) #传入tuple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dict子类&quot;&gt;dict子类&lt;/h3&gt;
&lt;p&gt;写类不建议继承list和dict
某些时候c不会使用覆盖的方法，而是会用dict本身的方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from collections import UserDict 
#推荐使用UserDict被python重写过
class Mydict(UserDict):
    def __setitem__(self, key, value):
        super().__setitem__(key, value*2)

from collections import defaultdict

# 如果找不到key,就赋值
my_dict = defaultdict(dict())
my_value = my_dict['fank'] #这里我的py3.7.1报错了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;set-fronzenset&quot;&gt;set fronzenset&lt;/h3&gt;

&lt;p&gt;set和fronzenset(不可变)无序，不重复，在去重时用的很多，并且fronzenset是不可变类型，所以可以做为dict的key&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s = set('abcd')
s1 = {'a', 'b'} #type是set
s2 = frozenset('abcde') #无法add值，
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;set-difference&quot;&gt;set difference&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s = {'a','b','c'}
ans = set('cef')
rs = s.difference(ans)
print(rs) # {'a','b'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dict和set实现原理&quot;&gt;dict和set实现原理&lt;/h4&gt;

&lt;p&gt;dict 查哈希表，key必须为可哈希的值。str,fset,tuple,自己实现的类&lt;/p&gt;

&lt;p&gt;dict的内存花销大，查询速度快&lt;/p&gt;

&lt;p&gt;垃圾回收算法是采用引用计数 del&lt;/p&gt;

&lt;h3 id=&quot;元类编程&quot;&gt;元类编程&lt;/h3&gt;

&lt;p&gt;property动态属性，User.age可以取属性，不用调函数，类似get，set为@age.setter&lt;/p&gt;

&lt;p&gt;@propery&lt;/p&gt;

&lt;p&gt;def age(self):&lt;/p&gt;

&lt;p&gt;return age.year&lt;/p&gt;

&lt;h3 id=&quot;__getattr__与__getattribute__的区别&quot;&gt;__getattr__与__getattribute__的区别&lt;/h3&gt;

&lt;p&gt;__getattr__在查找不到属性的时候调用(写了就不会报错).维护dict动态访问key&lt;/p&gt;

&lt;p&gt;def &lt;strong&gt;getattr&lt;/strong&gt;(self, item): return “not find”&lt;/p&gt;

&lt;p&gt;def &lt;strong&gt;getattribute&lt;/strong&gt;(self, item): return “true” 无条件进入这个函数，控制全局属性访问&lt;/p&gt;

&lt;p&gt;属性描述符实现__get__,&lt;strong&gt;set&lt;/strong&gt;,&lt;strong&gt;delete&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;数据描述符，非数据描述符&lt;/p&gt;

&lt;p&gt;属性查找过程&lt;/p&gt;

&lt;p&gt;传递方法为变化的user.age方式无法实现， 使用getattr(user, age)&lt;/p&gt;

&lt;h3 id=&quot;__new__和__init__区别&quot;&gt;__new__和__init__区别&lt;/h3&gt;

&lt;p&gt;def &lt;strong&gt;new&lt;/strong&gt;(cls, *args, **kwargs):pass new传递类，在init之前，new控制对象的生成过程，如果new不返回对象，不会调用init函数&lt;/p&gt;

&lt;p&gt;type是默认元类，metaclass是自定义元类，可以控制实例化过程&lt;/p&gt;

&lt;h3 id=&quot;迭代器和生成器&quot;&gt;迭代器和生成器&lt;/h3&gt;

&lt;p&gt;迭代器是访问集合内元素的一种方式，一般用来遍历数据。&lt;/p&gt;

&lt;p&gt;迭代器和以下标的访问方式不一样，迭代器是不能返回的，迭代器提供一种惰性方式。&lt;/p&gt;

&lt;p&gt;__iter__迭代协议，可迭代的实现方法&lt;/p&gt;

&lt;p&gt;from collections.abc import Iterable,Iterator&lt;/p&gt;

&lt;p&gt;iter([_list])迭代器&lt;/p&gt;

&lt;p&gt;def &lt;strong&gt;iter&lt;/strong&gt;(self) / def &lt;strong&gt;getitem&lt;/strong&gt;(self, item)&lt;/p&gt;

&lt;p&gt;next(itor)接受迭代器，迭代器next无法切片。文件太大使用迭代器读数据&lt;/p&gt;

&lt;p&gt;生成器函数，函数内有yield关键字&lt;/p&gt;

&lt;p&gt;def gen_func(): yield 1 yield2 yield3&lt;/p&gt;

&lt;p&gt;gen = gen_func() #gen生成器对象，不是值&lt;/p&gt;

&lt;p&gt;for i in gen: print(i) 惰性求值提供了可能，比list好处是省内存&lt;/p&gt;

&lt;p&gt;查看字节码，import dis dis.dis(func)&lt;/p&gt;

&lt;h3 id=&quot;socket编程&quot;&gt;socket编程&lt;/h3&gt;

&lt;p&gt;import socket&lt;/p&gt;

&lt;p&gt;server = socket.socket()&lt;/p&gt;

&lt;p&gt;server.bind((‘0.0.0.0’, 8000))&lt;/p&gt;

&lt;p&gt;server.listen()&lt;/p&gt;

&lt;p&gt;sock, addr = server.accept()&lt;/p&gt;

&lt;p&gt;data = server.recv(1024) #1kb&lt;/p&gt;

&lt;h3 id=&quot;多线进程&quot;&gt;多线、进程&lt;/h3&gt;

&lt;p&gt;global interpreter lock GIL&lt;/p&gt;

&lt;p&gt;python中一个线程对应于c中的线程&lt;/p&gt;

&lt;p&gt;gil使得同一时刻只有一个线程在一个cpu上执行字节码&lt;/p&gt;

&lt;p&gt;为了安全，但速度慢，无法体现多核优势。pypy是去gil化的。gil在遇到io操作会主动释放&lt;/p&gt;

&lt;p&gt;操作系统调度的最小单元线程，对于io操作，多线程和多进程差别不大。&lt;/p&gt;

&lt;p&gt;1.通过thread类实例化&lt;/p&gt;

&lt;p&gt;thread1 = threading.Thread(target=func, args=(“”,))&lt;/p&gt;

&lt;p&gt;thread1.setDaemon(True)#设置为守护线程。当主线程关闭时，子线程被kill&lt;/p&gt;

&lt;p&gt;thread1.join() #阻塞，等待执行完&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过继承thread来实现多线程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;class GetDetailHtml(threading.Thread):&lt;/p&gt;

&lt;p&gt;def run(self):&lt;/p&gt;

&lt;p&gt;pass&lt;/p&gt;

&lt;p&gt;thread1 = GDH()&lt;/p&gt;

&lt;p&gt;thread1.start()&lt;/p&gt;

&lt;h3 id=&quot;线程之间的通信方式&quot;&gt;线程之间的通信方式&lt;/h3&gt;

&lt;p&gt;1.共享全局变量(list)（多线程可以，多进程不行）&lt;/p&gt;

&lt;p&gt;这种方法，线程并不安全，需要加gil锁，所以并不推荐用作通信&lt;/p&gt;

&lt;p&gt;2.通过queue方法进行线程间同步,queue本身是线程安全的&lt;/p&gt;

&lt;p&gt;from queue import Queue&lt;/p&gt;

&lt;p&gt;detail_url_queue = Queue(maxsize=1000)&lt;/p&gt;

&lt;p&gt;url = queue.get()#阻塞方法，如果为空就一直停顿等待&lt;/p&gt;

&lt;p&gt;queueq.put_nowait()#设置为非阻塞&lt;/p&gt;

&lt;p&gt;.join()一直阻塞，想退出需要调用.task_down() #爬虫暂停&lt;/p&gt;

&lt;p&gt;如果共用变量为dict或其他，考虑使用全局变量&lt;/p&gt;

&lt;h3 id=&quot;线程同步lock-rlock&quot;&gt;线程同步（lock, rlock）&lt;/h3&gt;

&lt;p&gt;from threading import Lock&lt;/p&gt;

&lt;p&gt;lock = Lock()&lt;/p&gt;

&lt;p&gt;global lock&lt;/p&gt;

&lt;p&gt;lock.acquire()&lt;/p&gt;

&lt;p&gt;a +=1&lt;/p&gt;

&lt;p&gt;lock.release()&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用锁会影响性能&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.锁会引起死锁（互相等待）&lt;/p&gt;

&lt;p&gt;rlock可重入的锁，在同一个线程里面，可以连续调用多次acquire，需要相等数量的release.&lt;/p&gt;

&lt;h3 id=&quot;condition条件变量用于复杂的线程间同步锁&quot;&gt;condition条件变量，用于复杂的线程间同步锁&lt;/h3&gt;

&lt;p&gt;from threading import Condition&lt;/p&gt;

&lt;p&gt;self.cond.acquire()&lt;/p&gt;

&lt;p&gt;print()&lt;/p&gt;

&lt;p&gt;self.cond.notify()&lt;/p&gt;

&lt;p&gt;self.cond.wait()&lt;/p&gt;

&lt;p&gt;self.release()&lt;/p&gt;

&lt;p&gt;with self.cond = acquire()/release()&lt;/p&gt;

&lt;p&gt;在调用with之后，才能使用notify, wait&lt;/p&gt;

&lt;p&gt;condition有两层锁，一把底层锁会在线程调用wait方法的时候释放，上面的锁会值每次调用wait时分配一把并放入到cond的等待队列中，等到notify方法唤醒&lt;/p&gt;

&lt;h3 id=&quot;semaphore-是用于控制进入数量的锁&quot;&gt;Semaphore 是用于控制进入数量的锁&lt;/h3&gt;

&lt;p&gt;#文件读写，写一搬只用一个线程，读可以允许有多个&lt;/p&gt;

&lt;p&gt;sem = threading.Semaphore(3)&lt;/p&gt;

&lt;p&gt;self.sem.acquire()&lt;/p&gt;

&lt;p&gt;self.sem.release() #在另一个函数release，每次3个线程&lt;/p&gt;

&lt;p&gt;线程池concurrent #py3.2&lt;/p&gt;

&lt;p&gt;from concurrent import futures&lt;/p&gt;

&lt;p&gt;1.主线程中可以获取某一个线程的状态或者某一个任务的状态，以及返回值&lt;/p&gt;

&lt;p&gt;2.当一个线程完成的时候，主线程能立即知道&lt;/p&gt;

&lt;p&gt;3.futures可以让多线程多进程编码接口一致&lt;/p&gt;

&lt;p&gt;from concurrent.futures import ThreadPoolExecutor&lt;/p&gt;

&lt;p&gt;executor = ThreadPoolExecutor(max_workers=2)&lt;/p&gt;

&lt;p&gt;task1 = executor.submit(get_html, (3))&lt;/p&gt;

&lt;p&gt;print(task1.done()) #done用于判定某个任务是否完成&lt;/p&gt;

&lt;p&gt;print(task1.result()) #阻塞的方法，可以获取执行结果&lt;/p&gt;

&lt;p&gt;task2.cancel()#取消&lt;/p&gt;

&lt;p&gt;#获取已经成功的task返回&lt;/p&gt;

&lt;p&gt;urls = [3,2,3]&lt;/p&gt;

&lt;p&gt;from concurrent.futures import as_completed&lt;/p&gt;

&lt;p&gt;all_task = [executor.submit(get_html, (url)) for url in urls]&lt;/p&gt;

&lt;p&gt;for future in as_complete(all_task):&lt;/p&gt;

&lt;p&gt;data = future.result()&lt;/p&gt;

&lt;p&gt;简化版,但返回顺序是urls，并不是谁先完成返回谁&lt;/p&gt;

&lt;p&gt;for data in executor.map(get_html, urls):&lt;/p&gt;

&lt;p&gt;print(data)&lt;/p&gt;

&lt;h3 id=&quot;多进程&quot;&gt;多进程&lt;/h3&gt;

&lt;p&gt;线程由于有gil无法并发，io操作进程切换代价高于线程。&lt;/p&gt;

&lt;p&gt;耗cpu的操作，多核cpu，多进程优于多线程。&lt;/p&gt;

&lt;p&gt;进程数据完全隔离,无法使用共享全局变量&lt;/p&gt;

&lt;p&gt;子进程完全拷贝Fork之后的父进程代码运行&lt;/p&gt;

&lt;p&gt;from concurrent.futures import ProcessPoolExecutor&lt;/p&gt;

&lt;p&gt;import multiproessing #比上面更底层，但不推荐&lt;/p&gt;

&lt;p&gt;def get_html(n):&lt;/p&gt;

&lt;p&gt;time.sleep(n)&lt;/p&gt;

&lt;p&gt;return n&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == ‘&lt;strong&gt;main&lt;/strong&gt;’:&lt;/p&gt;

&lt;p&gt;progress = multiprocessing.Process(target=get_html, args=(2,))&lt;/p&gt;

&lt;p&gt;progress.start()&lt;/p&gt;

&lt;p&gt;progress.join()&lt;/p&gt;

&lt;p&gt;queue不能直接用于进程池通信，pool中的通信要使用manager.queue&lt;/p&gt;

&lt;p&gt;通过pipe实现进程通信&lt;/p&gt;

&lt;p&gt;recevie_pipe, send_pipe = Pipe()&lt;/p&gt;

&lt;p&gt;#pipe只适用与两个进程&lt;/p&gt;

&lt;h3 id=&quot;协程-有多个入口的函数可以暂停的函数可以向暂停的地方传值&quot;&gt;协程 （有多个入口的函数，可以暂停的函数，可以向暂停的地方传值）&lt;/h3&gt;

&lt;p&gt;python3.5之后的协程是原生协程，之前是利用生成器完成&lt;/p&gt;

&lt;p&gt;生成器不只可以产出值，还可以接受值send()&lt;/p&gt;

&lt;p&gt;send()是协程的基础&lt;/p&gt;

&lt;p&gt;throw()扔异常&lt;/p&gt;

&lt;p&gt;yield from iterable&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
from itertools import chain

for value in chain(list, dict, range(5))

def my_chain(*args, **kwaags):

for my_iterable in args:

yield from iterable

# for value in my_iterable:

# yield value

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;原生协程-async和await-e-sing-k&quot;&gt;原生协程 async和await e sing k&lt;/h3&gt;

&lt;p&gt;asyncio 异步io并发编程 py3.4以后支持&lt;/p&gt;

&lt;p&gt;事件循环&lt;/p&gt;

&lt;p&gt;协程编码模式3个：1.事件循环 2.回调(驱动生成器) 3.epoll（io多路复用）&lt;/p&gt;

&lt;p&gt;应用：tornado, gevent, twisted(scrapy, django channels)&lt;/p&gt;

&lt;p&gt;ps: tornado不建议使用Pymysql,mysqlclient&lt;/p&gt;

&lt;p&gt;获取协程的返回值&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import asyncio

loop = asyncio.get_event_loop()

loop.run_forever()

loop.run_until_complate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;1.loop会放到future中&lt;/p&gt;

&lt;p&gt;2.取消future(task)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;async def get_html():

await asyncio.sleep(sleep_times)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2019/03/08/python-deep.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2019/03/08/python-deep.html</guid>
        
        <category>python</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Ubuntu&amp;OSX的app抓包方案</title>
        <description>&lt;h2 id=&quot;ubuntu抓包方案&quot;&gt;Ubuntu抓包方案&lt;/h2&gt;

&lt;h2 id=&quot;必备条件&quot;&gt;必备条件&lt;/h2&gt;
&lt;p&gt;电脑手机同一wifi (如果pc做了ip端口映射也可以使用广域网ip抓包)&lt;/p&gt;

&lt;h2 id=&quot;方案1&quot;&gt;方案1&lt;/h2&gt;

&lt;h3 id=&quot;fiddler&quot;&gt;Fiddler&lt;/h3&gt;

&lt;p&gt;Fiddler在Ubuntu上基于mono运行&lt;/p&gt;

&lt;p&gt;Fiddler &amp;amp; mono 下载地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://fiddler.wikidot.com/mono
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;下载并装成功&lt;/li&gt;
  &lt;li&gt;打开Fiddler-&amp;gt; tools-&amp;gt;options -&amp;gt; connections  查看Port选项，记录下来&lt;/li&gt;
  &lt;li&gt;手机连接wifi并选择代理，方式手动代理&lt;/li&gt;
  &lt;li&gt;填写主机名为PC本地ip地址，端口填写刚刚记录的Port&lt;/li&gt;
  &lt;li&gt;打开手机app，观察Fiddler接受\发送的请求&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;方案2&quot;&gt;方案2&lt;/h2&gt;

&lt;h3 id=&quot;charles&quot;&gt;Charles&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;下载安装
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.charlesproxy.com/download/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;打开charles在Proxy-&amp;gt;ProxySetting设置一个端口号，并勾选Enable&lt;/li&gt;
  &lt;li&gt;设置手机代理&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果手机包出现乱码情况，请安装charles证书（安装方法在最后）。如果手机无法安装.pem修改为.crt
（小米手机进入到设置-wifi，点击高级，安装证书）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;打开手机app，观察charles接受\发送的请求&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mac-osx抓包方案&quot;&gt;mac osx抓包方案&lt;/h2&gt;

&lt;h3 id=&quot;charles-1&quot;&gt;Charles&lt;/h3&gt;

&lt;p&gt;使用手机安装SSL证书&lt;/p&gt;

&lt;p&gt;在help-&amp;gt;SSL Proxying-&amp;gt; “nstall Charles Root Certificate on a Mobile Device or remote Browser”&lt;/p&gt;

&lt;p&gt;然后根据提示访问安装&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2019/03/08/appspider-tools.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2019/03/08/appspider-tools.html</guid>
        
        <category>app,</category>
        
        <category>抓包</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Hey, U find me!</title>
        <description>&lt;h3 id=&quot;我&quot;&gt;我&lt;/h3&gt;

&lt;p&gt;网名：三秋，取自《滕王阁序》“时维九月，序属三秋。” 九月生，天秤座。&lt;/p&gt;

&lt;p&gt;十分热爱思考，善于分析、判断、总结和预测。&lt;/p&gt;

&lt;h3 id=&quot;计算机&quot;&gt;计算机&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;通过解决问题学习计算机&lt;/li&gt;
  &lt;li&gt;通过学习计算机解决问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在很久以前使用计算机解决了问题，从此便对计算机产生了浓厚兴趣。&lt;/p&gt;

&lt;h3 id=&quot;如何找到我&quot;&gt;如何找到我&lt;/h3&gt;

&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/fankcoder&quot;&gt;fankcoder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;微博: &lt;a href=&quot;https://weibo.com/u/2424646683&quot;&gt;似叶三秋&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;知乎: &lt;a href=&quot;https://www.zhihu.com/people/si-xie-san-qiu/activities&quot;&gt;似叶三秋&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bilibili: &lt;a href=&quot;https://space.bilibili.com/38307214&quot;&gt;三秋Q3Q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Email: fankcoder#gmail.com&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/about/2019/03/08/HeyUFindMe.html</link>
        <guid isPermaLink="true">http://localhost:4000/about/2019/03/08/HeyUFindMe.html</guid>
        
        <category>me</category>
        
        
        <category>About</category>
        
      </item>
    
      <item>
        <title>chmod命令</title>
        <description>&lt;h2 id=&quot;chmod-命令&quot;&gt;chmod 命令&lt;/h2&gt;

&lt;h3 id=&quot;文字设定法&quot;&gt;文字设定法&lt;/h3&gt;

&lt;p&gt;语法：chmod [选项] [操作对象] [操作符] [权限] 文件名&lt;/p&gt;

&lt;p&gt;选项：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-c : 若该档案权限确实已经更改，才显示其更改动作
-f : 若该档案权限无法被更改也不要显示错误讯息
-v : 显示权限变更的详细资料
-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;操作对象，可是下述字母中的任一个或者它们的组合：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;u 表示“用户（user）”，即文件或目录的所有者。
g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。
o 表示“其他（others）用户”。
a 表示“所有（all）用户”。它是系统默认值。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;操作符号：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ 添加某个权限。
- 取消某个权限。
= 赋予给定权限并取消其他所有权限（如果有的话）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;权限。可用下述字母的任意组合：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r 可读。
w 可写。
x 可执行。
X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。
s 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。
t 保存程序的文本到交换设备上。
u 与文件属主拥有一样的权限。
g 与和文件属主同组的用户拥有一样的权限。
o 与其他用户拥有一样的权限。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将档案 file1.txt 设为所有人皆可读取: chmod ugo+r file1.txt chmod a+r file1.txt&lt;/p&gt;

&lt;p&gt;将档案 file1.txt 与 file2.txt 设为该档案拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 : chmod ug+w,o-w file1.txt file2.txt 将 ex1.py&lt;/p&gt;

&lt;p&gt;设定为只有该档案拥有者可以执行: chmod u+x ex1.py&lt;/p&gt;

&lt;p&gt;将目前目录下的所有档案与子目录皆设为任何人可读取: chmod -R a+r *&lt;/p&gt;

&lt;h3 id=&quot;数字设定法&quot;&gt;数字设定法&lt;/h3&gt;

&lt;p&gt;语法：chmod abc 文件名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r:4
w:2
x:1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;owner = rwx = 4+2+1 = 7
group = rwx = 4+2+1 = 7
others= --- = 0+0+0 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/11/01/chmod.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/11/01/chmod.html</guid>
        
        <category>chmod</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>screen工具</title>
        <description>&lt;h2 id=&quot;screen-多窗口工具&quot;&gt;screen 多窗口工具&lt;/h2&gt;
&lt;p&gt;远程到服务器，通常情况下我们会为每一个长时间任务开一个远程终端窗口，操作下载东西或者Print十几万行数据，等待，是一件让人非常痛苦的事情，而且在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉了，screen把我们从痛苦中解救出来。&lt;/p&gt;

&lt;p&gt;screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。当断开或关闭终端时，只要不杀死screen的进程，待重新连接后任能继续断开前的操作。&lt;/p&gt;

&lt;h2 id=&quot;screen命令&quot;&gt;screen命令&lt;/h2&gt;
&lt;p&gt;查看会话：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### screen -ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a screen on:
19393.test      (Detached)
1 Socket in /var/run/screen/S-root.&lt;/p&gt;

&lt;p&gt;选择会话&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### screen -r test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### screen -r 19393
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建一个新会话&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### screen -dmS test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;快捷键&quot;&gt;快捷键&lt;/h2&gt;

&lt;p&gt;C-a d 暂时断开screen会话&lt;/p&gt;

&lt;p&gt;C-a ?	显示所有键绑定信息&lt;/p&gt;

&lt;p&gt;C-a w	显示所有窗口列表&lt;/p&gt;

&lt;p&gt;C-a C-a	切换到之前显示的窗口&lt;/p&gt;

&lt;p&gt;C-a c	创建一个新的运行shell的窗口并切换到该窗口&lt;/p&gt;

&lt;p&gt;C-a n	切换到下一个窗口&lt;/p&gt;

&lt;p&gt;C-a p	切换到前一个窗口(与C-a n相对)&lt;/p&gt;

&lt;p&gt;C-a 0..9	切换到窗口0..9&lt;/p&gt;

&lt;p&gt;C-a a	发送 C-a到当前窗口&lt;/p&gt;

&lt;p&gt;C-a k	杀掉当前窗口&lt;/p&gt;

&lt;p&gt;C-a [	进入拷贝/回滚模式&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/03/10/screen-linux.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/03/10/screen-linux.html</guid>
        
        <category>screen</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Todolist 应用</title>
        <description>&lt;h1 id=&quot;todolist&quot;&gt;TodoList&lt;/h1&gt;

&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;TodoList是一个便捷的事项管理应用,它帮助我们管理待办任务,梳理工作思路,来提高工作效率&lt;/p&gt;

&lt;p&gt;TodoList包含账户注册登录等功能,来方便记录管理你的任务事项&lt;/p&gt;

&lt;h2 id=&quot;introduce&quot;&gt;Introduce&lt;/h2&gt;
&lt;p&gt;Todolist,a quick and convenient management application for items that are about to be done,which helps us manage the to-do tasks, combine working train of thought and improve work efficency.&lt;/p&gt;

&lt;p&gt;Todolist consists of kinds of functions,including the registration and login for an account,so that it can make your tasks record and items management much easier.&lt;/p&gt;

&lt;h2 id=&quot;项目地址&quot;&gt;项目地址&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/fankcoder/django-todolist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;##安装&amp;amp;运行
在用户目录下执行,将代码clone到本地&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/fankcoder/django-todolist.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所需环境,请看 django-todolist/doc/requirements.txt&lt;/p&gt;

&lt;p&gt;注:为了部署方便应用默认采用了sqlite3数据库,需更换为MySQL数据库,请更改settings.py如下代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'''
#use mysql databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'todolist',
        'USER': 'root',    #replace your mysql username
        'PASSWORD': 'xxxxx',  #replace your mysql password
        'HOST': '127.0.0.1',
        'PROT': '3306',
    }
}
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为,请注意替换为自己的MySQL用户密码.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#use mysql databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'todolist',
        'USER': 'root',    #replace your mysql username
        'PASSWORD': 'xxxxx',  #replace your mysql password
        'HOST': '127.0.0.1',
        'PROT': '3306',
    }
}
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
'''
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;##安装&amp;amp;配置完成后&lt;/p&gt;

&lt;p&gt;建立本地数据库,在django-todo/todo/目录下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py runserver 127.0.0.1:8001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果没有报错,打开浏览器并访问&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:8001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即可看到应用已经部署成功!&lt;/p&gt;

&lt;p&gt;##目录说明
doc 为文档目录 &lt;br /&gt;
todolist 为应用目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;django-todo/
├── doc
│   ├── index.png
│   ├── login.png
│   ├── register.png
│   ├── user_done.png
│   └── user_index.png
├── README.md
├── requirements.txt
├── requirements.txt~
└── todo
    ├── db.sqlite3
    ├── manage.py
    ├── test.py
    ├── test.py~
    ├── todo
    │   ├── __init__.py
    │   ├── __init__.pyc
    │   ├── settings.py
    │   ├── settings.pyc
    │   ├── urls.py
    │   ├── urls.pyc
    │   ├── wsgi.py
    │   └── wsgi.pyc
    └── todolist
        ├── admin.py
        ├── admin.pyc
        ├── forms.py
        ├── forms.pyc
        ├── __init__.py
        ├── __init__.pyc
        ├── models.py
        ├── models.pyc
        ├── static
        │   ├── css
        │   │   ├── create_sytle.css
        │   │   └── style.css
        │   └── js
        ├── templates
        │   ├── complete.html
        │   ├── create.html
        │   ├── index.html
        │   ├── login.html
        │   ├── nav.html
        │   └── register.html
        ├── tests.py
        ├── views.py
        └── views.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/03/08/todolist-django-python.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/03/08/todolist-django-python.html</guid>
        
        <category>python,django</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Linux 常用资源</title>
        <description>&lt;h2 id=&quot;常用指令&quot;&gt;常用指令&lt;/h2&gt;

&lt;h3 id=&quot;遍历创建&quot;&gt;遍历创建&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;当前目录&quot;&gt;当前目录&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pwd 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;上次目录&quot;&gt;上次目录&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;删除目录--f强制&quot;&gt;删除目录 -f强制&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -rf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;复制目录--a与源文件一模一样&quot;&gt;复制目录 -a与源文件一模一样&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;剪切改名&quot;&gt;剪切/改名&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;find搜索&quot;&gt;find搜索&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find /root -iname install.log  #-i不区分大小写
find /root -user root  #按照所有者搜索
find /var/log/ -mtime +10 #查找10天前修改的文件
-10 10天内修改文件
10 10天当天修改的文件
+10 10天前修改的文件
atime 文件访问时间
ctime 改变文件属性
mtime 修改文件内容

find . -size 25k
+25k 大于25k
-小于25k
M大写

find /etc -size +20k -a -size -50k
-a and 和
-o or 或

-exec ls -lh {} \;
find /etc -size +20k -a -size -50k -exec ls -lh {} \;
将第一个结果放入第二个在处理一遍
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;grep&quot;&gt;grep&lt;/h3&gt;
&lt;p&gt;grep是包含匹配搜索文件内容,find是完全匹配搜索文件名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep &quot;size&quot; anaconda-ks.cfg
-v 取返
-i 不分大小写
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;帮助命令&quot;&gt;帮助命令&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	man -f 查看级别相当于whatis
	whereis passwd
	ls --help选项帮助命令
	info 命令
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常用压缩格式-zip-gz-bz2-targz-tarbz2&quot;&gt;常用压缩格式 .zip .gz .bz2 .tar.gz .tar.bz2&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip 压缩文件名 源文件 #压缩文件
zip -r 压缩文件名 源文件 #压缩目录

unzip 压缩文件 #解压缩

gzip 源文件 #压缩为.gz的文件,源文件会消失
gzip -c 源文件 &amp;gt; 压缩文件 #源文件保留
gzip -r 目录 #压缩目录下所有子文件,不压缩目录
gzip -d 压缩文件 #解压
gunzip 压缩文件 #解压

打包tar
tar -cvf 打包文件名 源文件
tar -xvf 解打包
tar -zcvf 压缩包名.tar.gz 源文件
tar -zxvf 压缩包名.tar.gz #解压缩
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;shutdown-选项-时间&quot;&gt;shutdown [选项] 时间&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-c 取消前一个关机命令
-h 关机
-r 重启
rboot  重启
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mount--a-自动挂载etcfatab&quot;&gt;mount -a 自动挂载/etc/fatab&lt;/h3&gt;

&lt;h3 id=&quot;w&quot;&gt;w&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;查看用户登录信息 who类似 ### last 
所有用户登录信息 /var/log/wtmp ### lastlog 
最后登录时间
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%A4%87%E5%BF%98/2016/03/04/general-linux-resources.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%A4%87%E5%BF%98/2016/03/04/general-linux-resources.html</guid>
        
        <category>Linux</category>
        
        
        <category>备忘</category>
        
      </item>
    
      <item>
        <title>神器收藏</title>
        <description>&lt;h2 id=&quot;编辑器--ide&quot;&gt;编辑器 &amp;amp; IDE&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;VIM
    &lt;ul&gt;
      &lt;li&gt;gmarik/vundle&lt;/li&gt;
      &lt;li&gt;rizzatti/funcoo.vim&lt;/li&gt;
      &lt;li&gt;https://github.com/scrooloose/nerdtree.git&lt;/li&gt;
      &lt;li&gt;Modeliner&lt;/li&gt;
      &lt;li&gt;DrawIt&lt;/li&gt;
      &lt;li&gt;vim-scripts/Align&lt;/li&gt;
      &lt;li&gt;https://github.com/Lokaltog/vim-powerline.git&lt;/li&gt;
      &lt;li&gt;https://github.com/vim-scripts/taglist.vim.git&lt;/li&gt;
      &lt;li&gt;https://github.com/scrooloose/nerdcommenter.git&lt;/li&gt;
      &lt;li&gt;https://github.com/kien/ctrlp.vim.git&lt;/li&gt;
      &lt;li&gt;https://github.com/nelstrom/vim-visual-star-search.git&lt;/li&gt;
      &lt;li&gt;junegunn/goyo.vim&lt;/li&gt;
      &lt;li&gt;https://github.com/vim-scripts/Visual-Mark.git&lt;/li&gt;
      &lt;li&gt;https://github.com/mattn/emmet-vim.git&lt;/li&gt;
      &lt;li&gt;https://github.com/Shougo/neocomplcache.vim.git&lt;/li&gt;
      &lt;li&gt;https://github.com/terryma/vim-multiple-cursors.git&lt;/li&gt;
      &lt;li&gt;https://github.com/ervandew/supertab.git&lt;/li&gt;
      &lt;li&gt;https://github.com/sjl/vitality.vim.git&lt;/li&gt;
      &lt;li&gt;https://github.com/Lokaltog/vim-easymotion.git&lt;/li&gt;
      &lt;li&gt;rking/ag.vim&lt;/li&gt;
      &lt;li&gt;Valloric/YouCompleteMe&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sublime Text
    &lt;ul&gt;
      &lt;li&gt;Abacus&lt;/li&gt;
      &lt;li&gt;ASCII Decorator&lt;/li&gt;
      &lt;li&gt;BracketHighlighter&lt;/li&gt;
      &lt;li&gt;DocBlockr&lt;/li&gt;
      &lt;li&gt;Emmet&lt;/li&gt;
      &lt;li&gt;FileDiffs&lt;/li&gt;
      &lt;li&gt;Goto-CSS-Declaration&lt;/li&gt;
      &lt;li&gt;Laravel 4 Facades&lt;/li&gt;
      &lt;li&gt;Laravel Blade Highlighter&lt;/li&gt;
      &lt;li&gt;Live CSS&lt;/li&gt;
      &lt;li&gt;Open URL&lt;/li&gt;
      &lt;li&gt;Package Control&lt;/li&gt;
      &lt;li&gt;Theme-Soda&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PhpStorm&lt;/li&gt;
  &lt;li&gt;Intellij IDEA&lt;/li&gt;
  &lt;li&gt;PyCharm&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;浏览器&quot;&gt;浏览器&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Chrome
    &lt;ul&gt;
      &lt;li&gt;Visual Event&lt;/li&gt;
      &lt;li&gt;Web Developer&lt;/li&gt;
      &lt;li&gt;XPather&lt;/li&gt;
      &lt;li&gt;Tampermonkey&lt;/li&gt;
      &lt;li&gt;Pesticide for Chrome&lt;/li&gt;
      &lt;li&gt;EditThisCookie&lt;/li&gt;
      &lt;li&gt;Clockwork&lt;/li&gt;
      &lt;li&gt;AlloyDesigner&lt;/li&gt;
      &lt;li&gt;jQuery Audit&lt;/li&gt;
      &lt;li&gt;JSONView&lt;/li&gt;
      &lt;li&gt;Octosplit&lt;/li&gt;
      &lt;li&gt;Octotree&lt;/li&gt;
      &lt;li&gt;Print GitHub markdown: GitPrint.com&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;文档--代码片段管理&quot;&gt;文档 &amp;amp; 代码片段管理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;CodeBox&lt;/li&gt;
  &lt;li&gt;Dash&lt;/li&gt;
  &lt;li&gt;iDocument Plus&lt;/li&gt;
  &lt;li&gt;Sparkbox&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;调试工具--代码生成&quot;&gt;调试工具 &amp;amp; 代码生成&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;CodeRunner&lt;/li&gt;
  &lt;li&gt;PAW&lt;/li&gt;
  &lt;li&gt;PaintCode&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;窗口管理&quot;&gt;窗口管理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Slate&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;取色--度量&quot;&gt;取色 &amp;amp; 度量&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Sip&lt;/li&gt;
  &lt;li&gt;ColorSchemer Studio&lt;/li&gt;
  &lt;li&gt;xScope&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;数据库管理&quot;&gt;数据库管理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Sequel Pro&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;屏幕录制--演示&quot;&gt;屏幕录制 &amp;amp; 演示&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;ScreenFlow&lt;/li&gt;
  &lt;li&gt;Zoom It&lt;/li&gt;
  &lt;li&gt;GrabIt&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;图像处理&quot;&gt;图像处理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Adobe Photoshop
    &lt;ul&gt;
      &lt;li&gt;PNG Hat&lt;/li&gt;
      &lt;li&gt;CSS Hat&lt;/li&gt;
      &lt;li&gt;Renamy&lt;/li&gt;
      &lt;li&gt;Random User Generator&lt;/li&gt;
      &lt;li&gt;Ink&lt;/li&gt;
      &lt;li&gt;GuideGuide&lt;/li&gt;
      &lt;li&gt;Griddify&lt;/li&gt;
      &lt;li&gt;FlatIcon&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Slicy&lt;/li&gt;
  &lt;li&gt;iconKit&lt;/li&gt;
  &lt;li&gt;LilyView&lt;/li&gt;
  &lt;li&gt;Mark Man&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;版本管理--比对&quot;&gt;版本管理 &amp;amp; 比对&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Tower&lt;/li&gt;
  &lt;li&gt;Github&lt;/li&gt;
  &lt;li&gt;Kaleidoscope&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;脑图--任务&quot;&gt;脑图 &amp;amp; 任务&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;OmniPlan&lt;/li&gt;
  &lt;li&gt;OmniGraffle&lt;/li&gt;
  &lt;li&gt;MindNode Pro&lt;/li&gt;
  &lt;li&gt;Things&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;虚拟机--vnc&quot;&gt;虚拟机 &amp;amp; VNC&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;VirtualBox&lt;/li&gt;
  &lt;li&gt;VMWare Fusion&lt;/li&gt;
  &lt;li&gt;Jump Desktop&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;效率&quot;&gt;效率&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred&lt;/li&gt;
  &lt;li&gt;PopClip&lt;/li&gt;
  &lt;li&gt;Soulver&lt;/li&gt;
  &lt;li&gt;Caffeine&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Sdef Editor&lt;/li&gt;
  &lt;li&gt;HopperDisassembler&lt;/li&gt;
  &lt;li&gt;Leaf&lt;/li&gt;
  &lt;li&gt;iTerm&lt;/li&gt;
  &lt;li&gt;ForkLift&lt;/li&gt;
  &lt;li&gt;GoAgentX&lt;/li&gt;
  &lt;li&gt;MPlayerX&lt;/li&gt;
  &lt;li&gt;GIFBrewery&lt;/li&gt;
  &lt;li&gt;Fritzing&lt;/li&gt;
  &lt;li&gt;Debookee&lt;/li&gt;
  &lt;li&gt;BetterZip&lt;/li&gt;
  &lt;li&gt;Cactus Beta&lt;/li&gt;
  &lt;li&gt;Bartender&lt;/li&gt;
  &lt;li&gt;AppCleaner&lt;/li&gt;
  &lt;li&gt;Adobe Effects&lt;/li&gt;
  &lt;li&gt;Adobe Illustrator&lt;/li&gt;
  &lt;li&gt;Adobe Reader&lt;/li&gt;
  &lt;li&gt;Airmail&lt;/li&gt;
  &lt;li&gt;The Unachiver&lt;/li&gt;
  &lt;li&gt;Charles&lt;/li&gt;
  &lt;li&gt;Macaw&lt;/li&gt;
  &lt;li&gt;Poedit&lt;/li&gt;
  &lt;li&gt;MacDown&lt;/li&gt;
  &lt;li&gt;Vox&lt;/li&gt;
  &lt;li&gt;TotalFinder&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 28 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%B7%A5%E5%85%B7/2016/01/28/good-tools.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%B7%A5%E5%85%B7/2016/01/28/good-tools.html</guid>
        
        <category>神器</category>
        
        
        <category>工具</category>
        
      </item>
    
  </channel>
</rss>
